{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/constants.ts"],
  "sourcesContent": ["import {\n  IFRAME_ID,\n  POPUP_WIDTH,\n  POPUP_HEIGHT,\n  CONNECT_POPUP_HEIGHT,\n  CONNECT_POPUP_WIDTH,\n  ACK_EVENT,\n  CANCEL_EVENT,\n  URL_EVENT,\n  DONE_EVENT,\n  ERROR_EVENT,\n  PING_EVENT,\n  WINDOW_EVENT,\n  ROUTE_EVENT,\n  USER_EVENT,\n  STYLES_ID,\n  CONNECT_SDK_VERSION,\n  CLOSE_POPUP_EVENT,\n  PLATFORM_POPUP,\n  PLATFORM_IFRAME,\n} from './constants';\n\nlet evHandlers: ConnectEventHandlers;\nlet onMessageFn: any;\nlet connectUrl: string;\nlet iframe: any;\nlet metaEl: any;\nlet targetWindow: Window;\nlet connectOrigin: string;\nlet popupWindow: Window | null;\n\nexport interface ConnectEventHandlers {\n  onDone: (event: ConnectDoneEvent) => void;\n  onCancel: (event: ConnectCancelEvent) => void;\n  onError: (event: ConnectErrorEvent) => void;\n  onRoute?: (event: ConnectRouteEvent) => void;\n  onUser?: (event: any) => void;\n  onLoad?: () => void;\n}\n\nconst defaultEventHandlers: any = {\n  onLoad: () => {},\n  onUser: (event: any) => {},\n  onRoute: (event: ConnectRouteEvent) => {},\n};\n\nexport interface ConnectProps {\n  connectUrl: string;\n  eventHandlers: ConnectEventHandlers;\n  linkingUri?: string;\n}\n\nexport interface ConnectCancelEvent {\n  code: number;\n  reason: string;\n}\n\nexport interface ConnectErrorEvent {\n  code: number;\n  reason: string;\n}\n\nexport interface ConnectDoneEvent {\n  code: number;\n  reason: string;\n  reportData: [\n    {\n      portfolioId: string;\n      type: string;\n      reportId: string;\n    }\n  ];\n}\n\nexport interface ConnectRouteEvent {\n  screen: string;\n  params: any;\n}\n\nexport interface ConnectOptions {\n  selector?: string;\n  node?: Node;\n  overlay?: string;\n  popup?: boolean;\n  popupOptions?: PopupOptions;\n  redirectUrl?: string;\n}\n\nexport interface PopupOptions {\n  width?: number;\n  height?: number;\n  top?: number;\n  left?: number;\n}\n\ninterface Connect {\n  destroy: () => void;\n  launch: (\n    url: string,\n    eventHandlers: ConnectEventHandlers,\n    options?: ConnectOptions\n  ) => Window | null | void;\n  initPostMessage: (options: ConnectOptions) => void;\n  openPopupWindow: (url: string) => void;\n  postMessage: (event: any) => void;\n}\n\nexport const Connect: Connect = {\n  destroy() {\n    if (iframe && iframe.parentNode) {\n      iframe.parentNode.removeChild(iframe);\n    }\n\n    if (metaEl && metaEl.parentNode) {\n      metaEl.parentNode.removeChild(metaEl);\n    }\n\n    if (!iframe && targetWindow) {\n      targetWindow.close();\n    }\n\n    iframe = undefined;\n    metaEl = undefined;\n\n    window.removeEventListener('message', onMessageFn);\n  },\n\n  launch(\n    url: string,\n    eventHandlers: ConnectEventHandlers,\n    options: ConnectOptions = {}\n  ) {\n    connectUrl = url;\n    evHandlers = { ...defaultEventHandlers, ...eventHandlers };\n    connectOrigin = new URL(connectUrl).origin;\n\n    if (options.popup) {\n      const defaultPopupOptions = {\n        toolbar: 'no',\n        location: 'no',\n        status: 'no',\n        menubar: 'no',\n        width: CONNECT_POPUP_HEIGHT,\n        height: CONNECT_POPUP_WIDTH,\n        top:\n          window.self.outerHeight / 2 +\n          window.self.screenY -\n          CONNECT_POPUP_HEIGHT / 2,\n        left:\n          window.self.outerWidth / 2 +\n          window.self.screenX -\n          CONNECT_POPUP_WIDTH / 2,\n      };\n      const popupOptions = { ...defaultPopupOptions, ...options.popupOptions };\n      const popupWindow = window.open(\n        connectUrl,\n        'targetWindow',\n        `toolbar=${defaultPopupOptions.toolbar},location=${defaultPopupOptions.location},status=${defaultPopupOptions.status},menubar=${defaultPopupOptions.menubar},width=${popupOptions.width},height=${popupOptions.height},top=${popupOptions.top},left=${popupOptions.left}`\n      );\n\n      if (!popupWindow) {\n        evHandlers.onError({ reason: 'error', code: 1403 });\n      } else {\n        targetWindow = popupWindow;\n        popupWindow.focus();\n        this.initPostMessage(options);\n        evHandlers.onLoad && evHandlers.onLoad();\n      }\n\n      return popupWindow;\n    } else {\n      if (iframe && iframe.parentNode) {\n        throw new Error(\n          'You must destroy the iframe before you can open a new one. Call \"destroy()\"'\n        );\n      }\n\n      if (!document.getElementById(STYLES_ID)) {\n        const style = document.createElement('style');\n        style.id = STYLES_ID;\n        style.type = 'text/css';\n        style.innerHTML = `#${IFRAME_ID} {\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 10;\n          background: rgba(0,0,0,0.8);\n        }`;\n        document.getElementsByTagName('head')[0].appendChild(style);\n      }\n\n      let metaArray = document.querySelectorAll('meta[name=\"viewport\"]');\n      if (metaArray.length === 0) {\n        metaEl = document.createElement('meta');\n        metaEl.setAttribute('name', 'viewport');\n        metaEl.setAttribute('content', 'initial-scale=1');\n        document.head.appendChild(metaEl);\n      }\n\n      iframe = document.createElement('iframe');\n\n      iframe.src = connectUrl;\n      iframe.setAttribute('id', IFRAME_ID);\n      iframe.setAttribute('frameborder', '0');\n      iframe.setAttribute('scrolling', 'no');\n      iframe.setAttribute('aria-label', 'Launching Modal');\n      iframe.setAttribute('title', 'Launching Modal');\n\n      // NOTE: update overlay\n      if (options.overlay) {\n        iframe.setAttribute('style', `background: ${options.overlay};`);\n      }\n\n      if (options.node) {\n        options.node.appendChild(iframe);\n      } else {\n        // NOTE: attach to selector if specified\n        const parentEl = !!options.selector\n          ? document.querySelector(options.selector)\n          : document.body;\n        if (parentEl) {\n          parentEl.appendChild(iframe);\n        } else {\n          console.warn(\n            `Couldn't find any elements matching \"${options.selector}\", appending \"iframe\" to \"body\" instead.`\n          );\n          document.body.appendChild(iframe);\n        }\n      }\n\n      iframe.onload = () => {\n        targetWindow = iframe.contentWindow;\n        this.initPostMessage(options);\n        evHandlers.onLoad && evHandlers.onLoad();\n      };\n\n      return null;\n    }\n  },\n\n  initPostMessage(options: ConnectOptions) {\n    // NOTE: ping connect until it responds\n    const intervalId = setInterval(() => {\n      const data = {\n        type: PING_EVENT,\n        selector: options.selector,\n        sdkVersion: CONNECT_SDK_VERSION,\n        platform: `${options.popup ? PLATFORM_POPUP : PLATFORM_IFRAME}`,\n      };\n      if (options.redirectUrl) data['redirectUrl'] = options.redirectUrl;\n\n      this.postMessage(data);\n    }, 1000);\n\n    onMessageFn = (event: any) => {\n      const payload = event.data.data;\n      const eventType = event.data.type;\n      // NOTE: make sure it's Connect and not a bad actor\n      if (event.origin === connectOrigin) {\n        // NOTE: actively pinging connect while it's displayed in a popup allows us to recover the\n        // session if the user refreshes the popup window\n        if (eventType === ACK_EVENT && !options.popup) {\n          clearInterval(intervalId);\n        } else if (eventType === URL_EVENT) {\n          this.openPopupWindow(event.data.url);\n        } else if (eventType === DONE_EVENT) {\n          evHandlers.onDone(payload);\n          this.destroy();\n        } else if (eventType === CANCEL_EVENT) {\n          evHandlers.onCancel(payload);\n          this.destroy();\n        } else if (eventType === ERROR_EVENT) {\n          evHandlers.onError(payload);\n          this.destroy();\n        } else if (eventType === ROUTE_EVENT) {\n          evHandlers.onRoute && evHandlers.onRoute(payload);\n        } else if (eventType === USER_EVENT) {\n          evHandlers.onUser && evHandlers.onUser(payload);\n        } else if (eventType === CLOSE_POPUP_EVENT) {\n          popupWindow?.close();\n        }\n      }\n    };\n\n    window.addEventListener('message', onMessageFn);\n  },\n\n  openPopupWindow(url: string) {\n    const top =\n      window.self.outerHeight / 2 + window.self.screenY - POPUP_HEIGHT / 2;\n    const left =\n      window.self.outerWidth / 2 + window.self.screenX - POPUP_WIDTH / 2;\n    popupWindow = window.open(\n      url,\n      'targetWindow',\n      `toolbar=no,location=no,status=no,menubar=no,width=${POPUP_WIDTH},height=${POPUP_HEIGHT},top=${top},left=${left}`\n    );\n\n    if (popupWindow) {\n      popupWindow.focus();\n      const intervalId = setInterval(() => {\n        // clear itself if window no longer exists or has been closed\n        if (popupWindow?.closed) {\n          // window closed, notify connect\n          clearInterval(intervalId);\n          this.postMessage({\n            type: WINDOW_EVENT,\n            closed: true,\n            blocked: false,\n          });\n        }\n      }, 1000);\n    } else {\n      this.postMessage({\n        type: WINDOW_EVENT,\n        closed: true,\n        blocked: true,\n      });\n    }\n  },\n\n  postMessage(data: any) {\n    targetWindow?.postMessage(data, connectUrl);\n  },\n};\n\nexport default Connect;\n", "// NOTE: Changing this value should be considered a version breaking change!!!\nexport const IFRAME_ID = 'connectIframe';\nexport const STYLES_ID = 'connectStyles';\nexport const PLATFORM_IFRAME = 'iframe';\nexport const PLATFORM_POPUP = 'web';\nexport const CONNECT_SDK_VERSION = 'PACKAGE_VERSION';\n\n// NOTE: oauth popup window dimensions\nexport const POPUP_WIDTH = 600;\nexport const POPUP_HEIGHT = 600;\n\n// NOTE: connect popup window dimensions\nexport const CONNECT_POPUP_WIDTH = 520;\nexport const CONNECT_POPUP_HEIGHT = 720;\n\n// NOTE: available events\nexport const ACK_EVENT = 'ack';\nexport const CANCEL_EVENT = 'cancel';\nexport const URL_EVENT = 'url';\nexport const DONE_EVENT = 'done';\nexport const ERROR_EVENT = 'error';\nexport const PING_EVENT = 'ping';\nexport const WINDOW_EVENT = 'window';\nexport const ROUTE_EVENT = 'route';\nexport const USER_EVENT = 'user';\nexport const CLOSE_POPUP_EVENT = 'closePopup';\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Connect", "src_default", "IFRAME_ID", "STYLES_ID", "PLATFORM_IFRAME", "PLATFORM_POPUP", "CONNECT_SDK_VERSION", "ACK_EVENT", "CANCEL_EVENT", "URL_EVENT", "DONE_EVENT", "ERROR_EVENT", "PING_EVENT", "WINDOW_EVENT", "ROUTE_EVENT", "USER_EVENT", "CLOSE_POPUP_EVENT", "evHandlers", "onMessageFn", "connectUrl", "iframe", "metaEl", "targetWindow", "connectOrigin", "popupWindow", "defaultEventHandlers", "event", "Connect", "url", "eventHandlers", "options", "__spreadValues", "defaultPopupOptions", "popupOptions", "STYLES_ID", "style", "IFRAME_ID", "parentEl", "intervalId", "data", "PING_EVENT", "CONNECT_SDK_VERSION", "PLATFORM_POPUP", "PLATFORM_IFRAME", "payload", "eventType", "ACK_EVENT", "URL_EVENT", "DONE_EVENT", "CANCEL_EVENT", "ERROR_EVENT", "ROUTE_EVENT", "USER_EVENT", "CLOSE_POPUP_EVENT", "top", "left", "WINDOW_EVENT", "src_default"]
}
