{
  "version": 3,
  "sources": ["../../src/constants.ts", "../../src/index.ts"],
  "sourcesContent": ["// NOTE: Changing this value should be considered a version breaking change!!!\nexport const IFRAME_ID = 'connectIframe';\nexport const STYLES_ID = 'connectStyles';\nexport const PLATFORM_IFRAME = 'iframe';\nexport const PLATFORM_POPUP = 'web';\nexport const CONNECT_SDK_VERSION = 'PACKAGE_VERSION';\n\n// NOTE: oauth popup window dimensions\nexport const POPUP_WIDTH = 600;\nexport const POPUP_HEIGHT = 600;\n\n// NOTE: connect popup window dimensions\nexport const CONNECT_POPUP_WIDTH = 520;\nexport const CONNECT_POPUP_HEIGHT = 720;\n\n// NOTE: available events\nexport const ACK_EVENT = 'ack';\nexport const CANCEL_EVENT = 'cancel';\nexport const URL_EVENT = 'url';\nexport const DONE_EVENT = 'done';\nexport const ERROR_EVENT = 'error';\nexport const PING_EVENT = 'ping';\nexport const WINDOW_EVENT = 'window';\nexport const ROUTE_EVENT = 'route';\nexport const USER_EVENT = 'user';\nexport const CLOSE_POPUP_EVENT = 'closePopup';\n", "import {\n  IFRAME_ID,\n  POPUP_WIDTH,\n  POPUP_HEIGHT,\n  CONNECT_POPUP_HEIGHT,\n  CONNECT_POPUP_WIDTH,\n  ACK_EVENT,\n  CANCEL_EVENT,\n  URL_EVENT,\n  DONE_EVENT,\n  ERROR_EVENT,\n  PING_EVENT,\n  WINDOW_EVENT,\n  ROUTE_EVENT,\n  USER_EVENT,\n  STYLES_ID,\n  CONNECT_SDK_VERSION,\n  CLOSE_POPUP_EVENT,\n  PLATFORM_POPUP,\n  PLATFORM_IFRAME,\n} from './constants';\n\nlet evHandlers: ConnectEventHandlers;\nlet onMessageFn: any;\nlet connectUrl: string;\nlet iframe: any;\nlet metaEl: any;\nlet targetWindow: Window;\nlet connectOrigin: string;\nlet popupWindow: Window | null;\n\nexport interface ConnectEventHandlers {\n  onDone: (event: ConnectDoneEvent) => void;\n  onCancel: (event: ConnectCancelEvent) => void;\n  onError: (event: ConnectErrorEvent) => void;\n  onRoute?: (event: ConnectRouteEvent) => void;\n  onUser?: (event: any) => void;\n  onLoad?: () => void;\n}\n\nconst defaultEventHandlers: any = {\n  onLoad: () => {},\n  onUser: (event: any) => {},\n  onRoute: (event: ConnectRouteEvent) => {},\n};\n\nexport interface ConnectProps {\n  connectUrl: string;\n  eventHandlers: ConnectEventHandlers;\n  linkingUri?: string;\n}\n\nexport interface ConnectCancelEvent {\n  code: number;\n  reason: string;\n}\n\nexport interface ConnectErrorEvent {\n  code: number;\n  reason: string;\n}\n\nexport interface ConnectDoneEvent {\n  code: number;\n  reason: string;\n  reportData: [\n    {\n      portfolioId: string;\n      type: string;\n      reportId: string;\n    }\n  ];\n}\n\nexport interface ConnectRouteEvent {\n  screen: string;\n  params: any;\n}\n\nexport interface ConnectOptions {\n  selector?: string;\n  node?: Node;\n  overlay?: string;\n  popup?: boolean;\n  popupOptions?: PopupOptions;\n  redirectUrl?: string;\n}\n\nexport interface PopupOptions {\n  width?: number;\n  height?: number;\n  top?: number;\n  left?: number;\n}\n\ninterface Connect {\n  destroy: () => void;\n  launch: (\n    url: string,\n    eventHandlers: ConnectEventHandlers,\n    options?: ConnectOptions\n  ) => Window | null | void;\n  initPostMessage: (options: ConnectOptions) => void;\n  openPopupWindow: (url: string) => void;\n  postMessage: (event: any) => void;\n}\n\nexport const Connect: Connect = {\n  destroy() {\n    if (iframe && iframe.parentNode) {\n      iframe.parentNode.removeChild(iframe);\n    }\n\n    if (metaEl && metaEl.parentNode) {\n      metaEl.parentNode.removeChild(metaEl);\n    }\n\n    if (!iframe && targetWindow) {\n      targetWindow.close();\n    }\n\n    iframe = undefined;\n    metaEl = undefined;\n\n    window.removeEventListener('message', onMessageFn);\n  },\n\n  launch(\n    url: string,\n    eventHandlers: ConnectEventHandlers,\n    options: ConnectOptions = {}\n  ) {\n    connectUrl = url;\n    evHandlers = { ...defaultEventHandlers, ...eventHandlers };\n    connectOrigin = new URL(connectUrl).origin;\n\n    if (options.popup) {\n      const defaultPopupOptions = {\n        toolbar: 'no',\n        location: 'no',\n        status: 'no',\n        menubar: 'no',\n        width: CONNECT_POPUP_HEIGHT,\n        height: CONNECT_POPUP_WIDTH,\n        top:\n          window.self.outerHeight / 2 +\n          window.self.screenY -\n          CONNECT_POPUP_HEIGHT / 2,\n        left:\n          window.self.outerWidth / 2 +\n          window.self.screenX -\n          CONNECT_POPUP_WIDTH / 2,\n      };\n      const popupOptions = { ...defaultPopupOptions, ...options.popupOptions };\n      const popupWindow = window.open(\n        connectUrl,\n        'targetWindow',\n        `toolbar=${defaultPopupOptions.toolbar},location=${defaultPopupOptions.location},status=${defaultPopupOptions.status},menubar=${defaultPopupOptions.menubar},width=${popupOptions.width},height=${popupOptions.height},top=${popupOptions.top},left=${popupOptions.left}`\n      );\n\n      if (!popupWindow) {\n        evHandlers.onError({ reason: 'error', code: 1403 });\n      } else {\n        targetWindow = popupWindow;\n        popupWindow.focus();\n        this.initPostMessage(options);\n        evHandlers.onLoad && evHandlers.onLoad();\n      }\n\n      return popupWindow;\n    } else {\n      if (iframe && iframe.parentNode) {\n        throw new Error(\n          'You must destroy the iframe before you can open a new one. Call \"destroy()\"'\n        );\n      }\n\n      if (!document.getElementById(STYLES_ID)) {\n        const style = document.createElement('style');\n        style.id = STYLES_ID;\n        style.type = 'text/css';\n        style.innerHTML = `#${IFRAME_ID} {\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 10;\n          background: rgba(0,0,0,0.8);\n        }`;\n        document.getElementsByTagName('head')[0].appendChild(style);\n      }\n\n      let metaArray = document.querySelectorAll('meta[name=\"viewport\"]');\n      if (metaArray.length === 0) {\n        metaEl = document.createElement('meta');\n        metaEl.setAttribute('name', 'viewport');\n        metaEl.setAttribute('content', 'initial-scale=1');\n        document.head.appendChild(metaEl);\n      }\n\n      iframe = document.createElement('iframe');\n\n      iframe.src = connectUrl;\n      iframe.setAttribute('id', IFRAME_ID);\n      iframe.setAttribute('frameborder', '0');\n      iframe.setAttribute('scrolling', 'no');\n      iframe.setAttribute('aria-label', 'Launching Modal');\n      iframe.setAttribute('title', 'Launching Modal');\n\n      // NOTE: update overlay\n      if (options.overlay) {\n        iframe.setAttribute('style', `background: ${options.overlay};`);\n      }\n\n      if (options.node) {\n        options.node.appendChild(iframe);\n      } else {\n        // NOTE: attach to selector if specified\n        const parentEl = !!options.selector\n          ? document.querySelector(options.selector)\n          : document.body;\n        if (parentEl) {\n          parentEl.appendChild(iframe);\n        } else {\n          console.warn(\n            `Couldn't find any elements matching \"${options.selector}\", appending \"iframe\" to \"body\" instead.`\n          );\n          document.body.appendChild(iframe);\n        }\n      }\n\n      iframe.onload = () => {\n        targetWindow = iframe.contentWindow;\n        this.initPostMessage(options);\n        evHandlers.onLoad && evHandlers.onLoad();\n      };\n\n      return null;\n    }\n  },\n\n  initPostMessage(options: ConnectOptions) {\n    // NOTE: ping connect until it responds\n    const intervalId = setInterval(() => {\n      const data = {\n        type: PING_EVENT,\n        selector: options.selector,\n        sdkVersion: CONNECT_SDK_VERSION,\n        platform: `${options.popup ? PLATFORM_POPUP : PLATFORM_IFRAME}`,\n      };\n      if (options.redirectUrl) data['redirectUrl'] = options.redirectUrl;\n\n      this.postMessage(data);\n    }, 1000);\n\n    onMessageFn = (event: any) => {\n      const payload = event.data.data;\n      const eventType = event.data.type;\n      // NOTE: make sure it's Connect and not a bad actor\n      if (event.origin === connectOrigin) {\n        // NOTE: actively pinging connect while it's displayed in a popup allows us to recover the\n        // session if the user refreshes the popup window\n        if (eventType === ACK_EVENT && !options.popup) {\n          clearInterval(intervalId);\n        } else if (eventType === URL_EVENT) {\n          this.openPopupWindow(event.data.url);\n        } else if (eventType === DONE_EVENT) {\n          evHandlers.onDone(payload);\n          this.destroy();\n        } else if (eventType === CANCEL_EVENT) {\n          evHandlers.onCancel(payload);\n          this.destroy();\n        } else if (eventType === ERROR_EVENT) {\n          evHandlers.onError(payload);\n          this.destroy();\n        } else if (eventType === ROUTE_EVENT) {\n          evHandlers.onRoute && evHandlers.onRoute(payload);\n        } else if (eventType === USER_EVENT) {\n          evHandlers.onUser && evHandlers.onUser(payload);\n        } else if (eventType === CLOSE_POPUP_EVENT) {\n          popupWindow?.close();\n        }\n      }\n    };\n\n    window.addEventListener('message', onMessageFn);\n  },\n\n  openPopupWindow(url: string) {\n    const top =\n      window.self.outerHeight / 2 + window.self.screenY - POPUP_HEIGHT / 2;\n    const left =\n      window.self.outerWidth / 2 + window.self.screenX - POPUP_WIDTH / 2;\n    popupWindow = window.open(\n      url,\n      'targetWindow',\n      `toolbar=no,location=no,status=no,menubar=no,width=${POPUP_WIDTH},height=${POPUP_HEIGHT},top=${top},left=${left}`\n    );\n\n    if (popupWindow) {\n      popupWindow.focus();\n      const intervalId = setInterval(() => {\n        // clear itself if window no longer exists or has been closed\n        if (popupWindow?.closed) {\n          // window closed, notify connect\n          clearInterval(intervalId);\n          this.postMessage({\n            type: WINDOW_EVENT,\n            closed: true,\n            blocked: false,\n          });\n        }\n      }, 1000);\n    } else {\n      this.postMessage({\n        type: WINDOW_EVENT,\n        closed: true,\n        blocked: true,\n      });\n    }\n  },\n\n  postMessage(data: any) {\n    targetWindow?.postMessage(data, connectUrl);\n  },\n};\n"],
  "mappings": "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",
  "names": ["popupWindow"]
}
