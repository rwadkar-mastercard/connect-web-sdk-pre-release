// NOTE: Changing this value should be considered a version breaking change!!!
export const IFRAME_ID = 'connectIframe';
export const STYLES_ID = 'connectStyles';
export const PLATFORM_IFRAME = 'iframe';
export const PLATFORM_POPUP = 'web';
export const CONNECT_SDK_VERSION = 'PACKAGE_VERSION';

// NOTE: oauth popup window dimensions
export const POPUP_WIDTH = 600;
export const POPUP_HEIGHT = 600;

// NOTE: connect popup window dimensions
export const CONNECT_POPUP_WIDTH = 520;
export const CONNECT_POPUP_HEIGHT = 720;

// NOTE: available events
export const ACK_EVENT = 'ack';
export const CANCEL_EVENT = 'cancel';
export const URL_EVENT = 'url';
export const DONE_EVENT = 'done';
export const ERROR_EVENT = 'error';
export const PING_EVENT = 'ping';
export const WINDOW_EVENT = 'window';
export const ROUTE_EVENT = 'route';
export const USER_EVENT = 'user';
export const CLOSE_POPUP_EVENT = 'closePopup';
import { IFRAME_ID, POPUP_WIDTH, POPUP_HEIGHT, CONNECT_POPUP_HEIGHT, CONNECT_POPUP_WIDTH, ACK_EVENT, CANCEL_EVENT, URL_EVENT, DONE_EVENT, ERROR_EVENT, PING_EVENT, WINDOW_EVENT, ROUTE_EVENT, USER_EVENT, STYLES_ID, CONNECT_SDK_VERSION, CLOSE_POPUP_EVENT, PLATFORM_POPUP, PLATFORM_IFRAME } from './constants';
let evHandlers;
let onMessageFn;
let connectUrl;
let iframe;
let metaEl;
let targetWindow;
let connectOrigin;
let popupWindow;
const defaultEventHandlers = {
  onLoad: () => {},
  onUser: event => {},
  onRoute: event => {}
};
export const Connect = {
  destroy() {
    if (iframe && iframe.parentNode) {
      iframe.parentNode.removeChild(iframe);
    }
    if (metaEl && metaEl.parentNode) {
      metaEl.parentNode.removeChild(metaEl);
    }
    if (!iframe && targetWindow) {
      targetWindow.close();
    }
    iframe = undefined;
    metaEl = undefined;
    window.removeEventListener('message', onMessageFn);
  },
  launch(url, eventHandlers) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    connectUrl = url;
    evHandlers = {
      ...defaultEventHandlers,
      ...eventHandlers
    };
    connectOrigin = new URL(connectUrl).origin;
    if (options.popup) {
      const defaultPopupOptions = {
        toolbar: 'no',
        location: 'no',
        status: 'no',
        menubar: 'no',
        width: CONNECT_POPUP_HEIGHT,
        height: CONNECT_POPUP_WIDTH,
        top: window.self.outerHeight / 2 + window.self.screenY - CONNECT_POPUP_HEIGHT / 2,
        left: window.self.outerWidth / 2 + window.self.screenX - CONNECT_POPUP_WIDTH / 2
      };
      const popupOptions = {
        ...defaultPopupOptions,
        ...options.popupOptions
      };
      const popupWindow = window.open(connectUrl, 'targetWindow', "toolbar=".concat(defaultPopupOptions.toolbar, ",location=").concat(defaultPopupOptions.location, ",status=").concat(defaultPopupOptions.status, ",menubar=").concat(defaultPopupOptions.menubar, ",width=").concat(popupOptions.width, ",height=").concat(popupOptions.height, ",top=").concat(popupOptions.top, ",left=").concat(popupOptions.left));
      if (!popupWindow) {
        evHandlers.onError({
          reason: 'error',
          code: 1403
        });
      } else {
        targetWindow = popupWindow;
        popupWindow.focus();
        this.initPostMessage(options);
        evHandlers.onLoad && evHandlers.onLoad();
      }
      return popupWindow;
    } else {
      if (iframe && iframe.parentNode) {
        throw new Error('You must destroy the iframe before you can open a new one. Call "destroy()"');
      }
      if (!document.getElementById(STYLES_ID)) {
        const style = document.createElement('style');
        style.id = STYLES_ID;
        style.type = 'text/css';
        style.innerHTML = "#".concat(IFRAME_ID, " {\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 10;\n          background: rgba(0,0,0,0.8);\n        }");
        document.getElementsByTagName('head')[0].appendChild(style);
      }
      let metaArray = document.querySelectorAll('meta[name="viewport"]');
      if (metaArray.length === 0) {
        metaEl = document.createElement('meta');
        metaEl.setAttribute('name', 'viewport');
        metaEl.setAttribute('content', 'initial-scale=1');
        document.head.appendChild(metaEl);
      }
      iframe = document.createElement('iframe');
      iframe.src = connectUrl;
      iframe.setAttribute('id', IFRAME_ID);
      iframe.setAttribute('frameborder', '0');
      iframe.setAttribute('scrolling', 'no');
      iframe.setAttribute('aria-label', 'Launching Modal');
      iframe.setAttribute('title', 'Launching Modal');

      // NOTE: update overlay
      if (options.overlay) {
        iframe.setAttribute('style', "background: ".concat(options.overlay, ";"));
      }
      if (options.node) {
        options.node.appendChild(iframe);
      } else {
        // NOTE: attach to selector if specified
        const parentEl = !!options.selector ? document.querySelector(options.selector) : document.body;
        if (parentEl) {
          parentEl.appendChild(iframe);
        } else {
          console.warn("Couldn't find any elements matching \"".concat(options.selector, "\", appending \"iframe\" to \"body\" instead."));
          document.body.appendChild(iframe);
        }
      }
      iframe.onload = () => {
        targetWindow = iframe.contentWindow;
        this.initPostMessage(options);
        evHandlers.onLoad && evHandlers.onLoad();
      };
      return null;
    }
  },
  initPostMessage(options) {
    // NOTE: ping connect until it responds
    const intervalId = setInterval(() => {
      const data = {
        type: PING_EVENT,
        selector: options.selector,
        sdkVersion: CONNECT_SDK_VERSION,
        platform: "".concat(options.popup ? PLATFORM_POPUP : PLATFORM_IFRAME)
      };
      if (options.redirectUrl) data['redirectUrl'] = options.redirectUrl;
      this.postMessage(data);
    }, 1000);
    onMessageFn = event => {
      const payload = event.data.data;
      const eventType = event.data.type;
      // NOTE: make sure it's Connect and not a bad actor
      if (event.origin === connectOrigin) {
        // NOTE: actively pinging connect while it's displayed in a popup allows us to recover the
        // session if the user refreshes the popup window
        if (eventType === ACK_EVENT && !options.popup) {
          clearInterval(intervalId);
        } else if (eventType === URL_EVENT) {
          this.openPopupWindow(event.data.url);
        } else if (eventType === DONE_EVENT) {
          evHandlers.onDone(payload);
          this.destroy();
        } else if (eventType === CANCEL_EVENT) {
          evHandlers.onCancel(payload);
          this.destroy();
        } else if (eventType === ERROR_EVENT) {
          evHandlers.onError(payload);
          this.destroy();
        } else if (eventType === ROUTE_EVENT) {
          evHandlers.onRoute && evHandlers.onRoute(payload);
        } else if (eventType === USER_EVENT) {
          evHandlers.onUser && evHandlers.onUser(payload);
        } else if (eventType === CLOSE_POPUP_EVENT) {
          var _popupWindow;
          (_popupWindow = popupWindow) === null || _popupWindow === void 0 || _popupWindow.close();
        }
      }
    };
    window.addEventListener('message', onMessageFn);
  },
  openPopupWindow(url) {
    const top = window.self.outerHeight / 2 + window.self.screenY - POPUP_HEIGHT / 2;
    const left = window.self.outerWidth / 2 + window.self.screenX - POPUP_WIDTH / 2;
    popupWindow = window.open(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=".concat(POPUP_WIDTH, ",height=").concat(POPUP_HEIGHT, ",top=").concat(top, ",left=").concat(left));
    if (popupWindow) {
      popupWindow.focus();
      const intervalId = setInterval(() => {
        var _popupWindow2;
        // clear itself if window no longer exists or has been closed
        if ((_popupWindow2 = popupWindow) !== null && _popupWindow2 !== void 0 && _popupWindow2.closed) {
          // window closed, notify connect
          clearInterval(intervalId);
          this.postMessage({
            type: WINDOW_EVENT,
            closed: true,
            blocked: false
          });
        }
      }, 1000);
    } else {
      this.postMessage({
        type: WINDOW_EVENT,
        closed: true,
        blocked: true
      });
    }
  },
  postMessage(data) {
    var _targetWindow;
    (_targetWindow = targetWindow) === null || _targetWindow === void 0 || _targetWindow.postMessage(data, connectUrl);
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,