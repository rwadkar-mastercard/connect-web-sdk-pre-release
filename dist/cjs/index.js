"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connect = void 0;
var _constants = require("./constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var evHandlers;
var onMessageFn;
var connectUrl;
var iframe;
var metaEl;
var targetWindow;
var connectOrigin;
var popupWindow;
var defaultEventHandlers = {
  onLoad: function onLoad() {},
  onUser: function onUser(event) {},
  onRoute: function onRoute(event) {}
};
var Connect = exports.Connect = {
  destroy: function destroy() {
    if (iframe && iframe.parentNode) {
      iframe.parentNode.removeChild(iframe);
    }
    if (metaEl && metaEl.parentNode) {
      metaEl.parentNode.removeChild(metaEl);
    }
    if (!iframe && targetWindow) {
      targetWindow.close();
    }
    iframe = undefined;
    metaEl = undefined;
    window.removeEventListener('message', onMessageFn);
  },
  launch: function launch(url, eventHandlers) {
    var _this = this;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    connectUrl = url;
    evHandlers = _objectSpread(_objectSpread({}, defaultEventHandlers), eventHandlers);
    connectOrigin = new URL(connectUrl).origin;
    if (options.popup) {
      var defaultPopupOptions = {
        toolbar: 'no',
        location: 'no',
        status: 'no',
        menubar: 'no',
        width: _constants.CONNECT_POPUP_HEIGHT,
        height: _constants.CONNECT_POPUP_WIDTH,
        top: window.self.outerHeight / 2 + window.self.screenY - _constants.CONNECT_POPUP_HEIGHT / 2,
        left: window.self.outerWidth / 2 + window.self.screenX - _constants.CONNECT_POPUP_WIDTH / 2
      };
      var popupOptions = _objectSpread(_objectSpread({}, defaultPopupOptions), options.popupOptions);
      var _popupWindow = window.open(connectUrl, 'targetWindow', "toolbar=".concat(defaultPopupOptions.toolbar, ",location=").concat(defaultPopupOptions.location, ",status=").concat(defaultPopupOptions.status, ",menubar=").concat(defaultPopupOptions.menubar, ",width=").concat(popupOptions.width, ",height=").concat(popupOptions.height, ",top=").concat(popupOptions.top, ",left=").concat(popupOptions.left));
      if (!_popupWindow) {
        evHandlers.onError({
          reason: 'error',
          code: 1403
        });
      } else {
        targetWindow = _popupWindow;
        _popupWindow.focus();
        this.initPostMessage(options);
        evHandlers.onLoad && evHandlers.onLoad();
      }
      return _popupWindow;
    } else {
      if (iframe && iframe.parentNode) {
        throw new Error('You must destroy the iframe before you can open a new one. Call "destroy()"');
      }
      if (!document.getElementById(_constants.STYLES_ID)) {
        var style = document.createElement('style');
        style.id = _constants.STYLES_ID;
        style.type = 'text/css';
        style.innerHTML = "#".concat(_constants.IFRAME_ID, " {\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 10;\n          background: rgba(0,0,0,0.8);\n        }");
        document.getElementsByTagName('head')[0].appendChild(style);
      }
      var metaArray = document.querySelectorAll('meta[name="viewport"]');
      if (metaArray.length === 0) {
        metaEl = document.createElement('meta');
        metaEl.setAttribute('name', 'viewport');
        metaEl.setAttribute('content', 'initial-scale=1');
        document.head.appendChild(metaEl);
      }
      iframe = document.createElement('iframe');
      iframe.src = connectUrl;
      iframe.setAttribute('id', _constants.IFRAME_ID);
      iframe.setAttribute('frameborder', '0');
      iframe.setAttribute('scrolling', 'no');
      iframe.setAttribute('aria-label', 'Launching Modal');
      iframe.setAttribute('title', 'Launching Modal');

      // NOTE: update overlay
      if (options.overlay) {
        iframe.setAttribute('style', "background: ".concat(options.overlay, ";"));
      }
      if (options.node) {
        options.node.appendChild(iframe);
      } else {
        // NOTE: attach to selector if specified
        var parentEl = !!options.selector ? document.querySelector(options.selector) : document.body;
        if (parentEl) {
          parentEl.appendChild(iframe);
        } else {
          console.warn("Couldn't find any elements matching \"".concat(options.selector, "\", appending \"iframe\" to \"body\" instead."));
          document.body.appendChild(iframe);
        }
      }
      iframe.onload = function () {
        targetWindow = iframe.contentWindow;
        _this.initPostMessage(options);
        evHandlers.onLoad && evHandlers.onLoad();
      };
      return null;
    }
  },
  initPostMessage: function initPostMessage(options) {
    var _this2 = this;
    // NOTE: ping connect until it responds
    var intervalId = setInterval(function () {
      var data = {
        type: _constants.PING_EVENT,
        selector: options.selector,
        sdkVersion: _constants.CONNECT_SDK_VERSION,
        platform: "".concat(options.popup ? _constants.PLATFORM_POPUP : _constants.PLATFORM_IFRAME)
      };
      if (options.redirectUrl) data['redirectUrl'] = options.redirectUrl;
      _this2.postMessage(data);
    }, 1000);
    onMessageFn = function onMessageFn(event) {
      var payload = event.data.data;
      var eventType = event.data.type;
      // NOTE: make sure it's Connect and not a bad actor
      if (event.origin === connectOrigin) {
        // NOTE: actively pinging connect while it's displayed in a popup allows us to recover the
        // session if the user refreshes the popup window
        if (eventType === _constants.ACK_EVENT && !options.popup) {
          clearInterval(intervalId);
        } else if (eventType === _constants.URL_EVENT) {
          _this2.openPopupWindow(event.data.url);
        } else if (eventType === _constants.DONE_EVENT) {
          evHandlers.onDone(payload);
          _this2.destroy();
        } else if (eventType === _constants.CANCEL_EVENT) {
          evHandlers.onCancel(payload);
          _this2.destroy();
        } else if (eventType === _constants.ERROR_EVENT) {
          evHandlers.onError(payload);
          _this2.destroy();
        } else if (eventType === _constants.ROUTE_EVENT) {
          evHandlers.onRoute && evHandlers.onRoute(payload);
        } else if (eventType === _constants.USER_EVENT) {
          evHandlers.onUser && evHandlers.onUser(payload);
        } else if (eventType === _constants.CLOSE_POPUP_EVENT) {
          var _popupWindow2;
          (_popupWindow2 = popupWindow) === null || _popupWindow2 === void 0 || _popupWindow2.close();
        }
      }
    };
    window.addEventListener('message', onMessageFn);
  },
  openPopupWindow: function openPopupWindow(url) {
    var _this3 = this;
    var top = window.self.outerHeight / 2 + window.self.screenY - _constants.POPUP_HEIGHT / 2;
    var left = window.self.outerWidth / 2 + window.self.screenX - _constants.POPUP_WIDTH / 2;
    popupWindow = window.open(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=".concat(_constants.POPUP_WIDTH, ",height=").concat(_constants.POPUP_HEIGHT, ",top=").concat(top, ",left=").concat(left));
    if (popupWindow) {
      popupWindow.focus();
      var intervalId = setInterval(function () {
        var _popupWindow3;
        // clear itself if window no longer exists or has been closed
        if ((_popupWindow3 = popupWindow) !== null && _popupWindow3 !== void 0 && _popupWindow3.closed) {
          // window closed, notify connect
          clearInterval(intervalId);
          _this3.postMessage({
            type: _constants.WINDOW_EVENT,
            closed: true,
            blocked: false
          });
        }
      }, 1000);
    } else {
      this.postMessage({
        type: _constants.WINDOW_EVENT,
        closed: true,
        blocked: true
      });
    }
  },
  postMessage: function postMessage(data) {
    var _targetWindow;
    (_targetWindow = targetWindow) === null || _targetWindow === void 0 || _targetWindow.postMessage(data, connectUrl);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,